%load('reducedModel')
load('../model/muscleModel')
addpath('../src')

objectiveFunction = {'human_ATPMaintainance'};
ATPProduction = findIndex(model.rxns, objectiveFunction);

%Minimal media simulation
inMedia = {
    'glycogen[s]'
    'O2[s]'
    'H+[s]'    
};

outMedia = {
    'CO2[s]' 
    'H2O[s]'
    'L-lactate[s]'
    'HCO3-[s]'
    'H+[s]'
};


[exchangeRxns, exchangeRxnsIndexes]=getExchangeRxns(model,'both');


%Remove ProtPool

reactionIn = getBounds(model, inMedia);
reactionOut = getBounds(model, outMedia);

model = setParam(model, 'lb', exchangeRxnsIndexes, 0);
model = setParam(model, 'ub', exchangeRxnsIndexes, 0);
model = setParam(model, 'ub', reactionOut, 1000);
model = setParam(model, 'lb', reactionIn, -1000);

%Allow glycogen uptake
model = setParam(model, 'lb', reactionIn(1), -1);

model = setParam(model, 'lb', objectiveFunction, 0);
model = setParam(model, 'ub', objectiveFunction, 1000);

model = setParam(model, 'obj', objectiveFunction, 1);

banSubsystems = {
    'Bile acid biosynthesis'
    'Glutathione metabolism'
    'Porphyrin metabolism'
    'Eicosanoid metabolism'
    'Serotonin and melatonin biosynthesis'
    'Folate metabolism'
    };
model = removeSubsystems(model, banSubsystems);

%Remove all compartments appart from cytosol, mitochondria and extracell
model.lb(ismember(model.rxnComps, [2 5 6 7 8])) = 0;
model.ub(ismember(model.rxnComps, [2 5 6 7 8])) = 0;

%Prevent c
HMR_4957

%Canonical flux
solutionA = solveLinMin(model, true)

%Complex 1 knock out
model1 = setParam(model, 'lb', 'HMR_6921', 0);
model1 = setParam(model1, 'ub', 'HMR_6921', 0);

solutionB = solveLinMin(model1, true)
%printAffected(model, solutionA, solutionB);


%glycerol-3-phosphate shunt knock
model2 = setParam(model1, 'lb', 'HMR_0483', 0);
model2 = setParam(model2, 'ub', 'HMR_0483', 0);
solutionC = solveLinMin(model2, true)
%printAffected(model, solutionB, solutionC)


%ETF-ubiquinone oxidoreductase knock
% model = setParam(model, 'lb', 'HMR_6911', 0);
% model = setParam(model, 'ub', 'HMR_6911', 0);

% solutionD = solveLinMin(model, true)
% printAffected(model, solutionC, solutionD)

%ATP synthase KO
model3 = setParam(model, 'lb', 'HMR_6916', 0);
model3 = setParam(model3, 'ub', 'HMR_6916', 0);

solutionD = solveLinMin(model3, true)
%printAffected(model, solutionC, solutionD)

totalSolution = abs(solutionA.x) + abs(solutionB.x) + abs(solutionC.x);

clc
printExchangeFluxes(model, solutionD.x)
